# ui/layout.py ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—á–∞—Ç, —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º—Ç–æ–≤ –∏ —Ç.–ø.)

import streamlit as st
from ui.sidebar import render_sidebar
from constants import LENGTH_OPTIONS, TONE_OPTIONS
from core.prompt_logic import save_prompt, validate_prompt_input

def render_main_ui():
    # üõë –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    if not st.session_state.get("user"):
        st.markdown("""
                <div style='display: flex; justify-content: center; align-items: center; height: 80vh;'>
                    <a href="?">
                        <button style="font-size:16px; padding: 10px 20px;'>üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google</button>
                    </a>
                </div>
            """, unsafe_allow_html=True)
        return  # ‚ùóÔ∏è—ç—Ç–æ—Ç return –∏–º–µ–µ—Ç —Ç–æ—Ç –∂–µ –æ—Ç—Å—Ç—É–ø, —á—Ç–æ –∏ if

    # ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ UI
    from ui.sidebar import render_sidebar  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç–∏
    render_sidebar()

    if st.session_state.get("edit_mode", False):
        name = "" if st.session_state.get("adding_new") else st.session_state.get("selected_prompt")
        data = st.session_state.prompts.get(name, None)
        render_prompt_editor(name, data)
    elif st.session_state.get("selected_prompt"):
        from ui.layout import display_messages, render_chat_ui
        display_messages()
        submitted, user_msg = render_chat_ui()
        if submitted:
            from services.gpt_service import generate_response
            response = generate_response(user_msg)
            st.session_state.chat_history.append({"role": "user", "content": user_msg})
            st.session_state.chat_history.append({"role": "assistant", "content": response})

def render_chat_ui():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—â–µ–Ω–∏—è (—á–∞—Ç)"""
    st.markdown("""<style>.block-container {padding-bottom: 120px;}</style>""", unsafe_allow_html=True)
    with st.form(key="chat_form", clear_on_submit=False):
        user_msg = st.text_area(f"üìå {st.session_state.selected_prompt}\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="chat_input", height=150)
        cols = st.columns([1, 1, 1, 1, 1])

        submitted = cols[0].form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        if cols[1].form_submit_button("‚öôÔ∏è", use_container_width=True):
            st.session_state.show_settings = not st.session_state.get("show_settings", False)
        if cols[2].form_submit_button("üí¨", use_container_width=True):
            pass  # future
        if cols[3].form_submit_button("üíæ", use_container_width=True):
            save_current_chat()
        if cols[4].form_submit_button("üßπ", use_container_width=True):
            st.session_state.chat_history.clear()

        if st.session_state.get("show_settings", False):
            st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            st.session_state.param1 = st.selectbox("–î–ª–∏–Ω–∞", LENGTH_OPTIONS, index=LENGTH_OPTIONS.index(st.session_state.param1))
            st.session_state.param2 = st.selectbox("–¢–æ–Ω", TONE_OPTIONS, index=TONE_OPTIONS.index(st.session_state.param2))

        return submitted, user_msg

def render_prompt_editor(name=None, data=None):
    """UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º—Ç–∞"""
    is_new = name is None
    default_data = {
        "instruction": "",
        "param1": "–î–ª–∏–Ω–∞",
        "param2": "–¢–æ–Ω"
    }
    data = data or default_data

    new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞", value=name or "")
    hint = st.text_area("–ü–æ–¥—Å–∫–∞–∑–∫–∞", value=data.get("instruction", ""), height=100)
    param1 = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä 1", ["-", "–î–ª–∏–Ω–∞", "–¢–æ–Ω"], index=1)
    param2 = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä 2", ["-", "–î–ª–∏–Ω–∞", "–¢–æ–Ω"], index=2)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        if validate_prompt_input(new_name, hint):
            save_prompt(new_name, hint, param1, param2)
            st.session_state.selected_prompt = new_name
            st.session_state.edit_mode = False
            st.session_state.adding_new = False
            st.rerun()

def display_messages():
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for msg in st.session_state.chat_history:
        is_user = msg["role"] == "user"
        align = "flex-end" if is_user else "flex-start"
        bg = "#e6f7ff" if is_user else "#f5f5f5"
        icon = "üßë‚Äçüíª" if is_user else "ü§ñ"
        st.markdown(f"""
            <div style='display: flex; justify-content: {align}; margin: 5px 0;'>
                <div style='background-color: {bg}; padding: 10px; border-radius: 10px; max-width: 80%;'>
                    <div style='font-size: 0.9em;'>{icon} {msg['content']}</div>
                </div>
            </div>
        """, unsafe_allow_html=True)

def save_current_chat():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    if st.session_state.chat_history:
        last = st.session_state.chat_history[-1]
        st.session_state.history.append({
            "prompt_name": st.session_state.selected_prompt,
            "input": last["content"]
        })